---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'raw rancher os instances in an own vpc'
  Parameters:
    ClassB:
      Description: 'Class B of VPC (10.XXX.0.0/16)'
      Type: Number
      Default: 0
      ConstraintDescription: 'Must be in the range [0-255]'
      MinValue: 0
      MaxValue: 255
    AllowedCidrBlock:
      Description: 'Allowed cidr block for incoming requests'
      Type: String
      Default: '0.0.0.0/0'
    SSHPublicKey:
      Description: 'Your ssh public key'
      Type: String
  Resources:
    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: !Sub '10.${ClassB}.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
        - Key: Name
          Value: !Sub 'Rancher  10.${ClassB}.0.0/16 (VPC)'
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
        - Key: Name
          Value: !Sub 'Rancher 10.${ClassB}.0.0/16 (InternetGateway)'
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
    SubnetAPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.${ClassB}.0.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: 'Rancher (SubnetAPublic)'
        - Key: Reach
          Value: public
    SubnetBPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Sub '10.${ClassB}.32.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: 'Rancher (SubnetBPublic)'
        - Key: Reach
          Value: public
    RouteTableAPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: 'Rancher (RouteTableAPublic)'
    RouteTableBPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: 'Rancher (RouteTableBPublic)'
    RouteTableAssociationAPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPublic
        RouteTableId: !Ref RouteTableAPublic
    RouteTableAssociationBPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetBPublic
        RouteTableId: !Ref RouteTableBPublic
    RouteTablePublicAInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableAPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    RouteTablePublicBInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableBPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    NetworkAclPublic:
      Type: 'AWS::EC2::NetworkAcl'
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Rancher (NetworkAclPublic)
    SubnetNetworkAclAssociationAPublic:
      Type: 'AWS::EC2::SubnetNetworkAclAssociation'
      Properties:
        SubnetId: !Ref SubnetAPublic
        NetworkAclId: !Ref NetworkAclPublic
    SubnetNetworkAclAssociationBPublic:
      Type: 'AWS::EC2::SubnetNetworkAclAssociation'
      Properties:
        SubnetId: !Ref SubnetBPublic
        NetworkAclId: !Ref NetworkAclPublic
    NetworkAclEntryInPublicAllowAll:
      Type: 'AWS::EC2::NetworkAclEntry'
      Properties:
        NetworkAclId: !Ref NetworkAclPublic
        RuleNumber: 99
        Protocol: -1
        RuleAction: allow
        Egress: false
        CidrBlock: '0.0.0.0/0'
    NetworkAclEntryOutPublicAllowAll:
      Type: 'AWS::EC2::NetworkAclEntry'
      Properties:
        NetworkAclId: !Ref NetworkAclPublic
        RuleNumber: 99
        Protocol: -1
        RuleAction: allow
        Egress: true
        CidrBlock: '0.0.0.0/0'
    RancherSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Security group for rancher host'
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroup)
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Ref AllowedCidrBlock
          - IpProtocol: tcp
            FromPort: '8080'
            ToPort: '8080'
            CidrIp: !Ref AllowedCidrBlock
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Ref AllowedCidrBlock
          - IpProtocol: tcp
            FromPort: '8000'
            ToPort: '8000'
            CidrIp: !Ref AllowedCidrBlock
          - IpProtocol: icmp
            FromPort: '-1'
            ToPort: '-1'
            CidrIp: 0.0.0.0/0
    RancherSgIngress500UDP:
      Type: 'AWS::EC2::SecurityGroupIngress'
      DependsOn: RancherSecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroupIngress)
        GroupId: !Ref RancherSecurityGroup
        IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        SourceSecurityGroupId: !Ref RancherSecurityGroup
    RancherSgIngress4500UDP:
      Type: 'AWS::EC2::SecurityGroupIngress'
      DependsOn: RancherSecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroupIngress)
        GroupId: !Ref RancherSecurityGroup
        IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        SourceSecurityGroupId: !Ref RancherSecurityGroup
    RancherSgIngress8080TCP:
      Type: 'AWS::EC2::SecurityGroupIngress'
      DependsOn: RancherSecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroupIngress)
        GroupId: !Ref RancherSecurityGroup
        IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        SourceSecurityGroupId: !Ref RancherSecurityGroup
    RancherSgIngress2049TCP:
      Type: 'AWS::EC2::SecurityGroupIngress'
      DependsOn: RancherSecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroupIngress)
        GroupId: !Ref RancherSecurityGroup
        IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !Ref RancherSecurityGroup
    RancherSgIngress9345TCP:
      Type: 'AWS::EC2::SecurityGroupIngress'
      DependsOn: RancherSecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroupIngress)
        GroupId: !Ref RancherSecurityGroup
        IpProtocol: tcp
        FromPort: '9345'
        ToPort: '9345'
        SourceSecurityGroupId: !Ref RancherSecurityGroup
    RancherSgIngress9345TCP:
      Type: 'AWS::EC2::SecurityGroupIngress'
      DependsOn: RancherSecurityGroup
      Properties:
        Tags:
          - Key: Name
            Value: Rancher (SecurityGroupIngress)
        GroupId: !Ref RancherSecurityGroup
        IpProtocol: tcp
        FromPort: '9345'
        ToPort: '9345'
        SourceSecurityGroupId: !Ref RancherSecurityGroup
    IAMRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action: 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: RancherInstancePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - 'cloudformation:SignalResource'
                  Effect: Allow
                  Resource:
                    - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
    IAMInstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - !Ref IAMRole
    RancherOsLaunchConfig:
      Type: 'AWS::AutoScaling::LaunchConfiguration'
      Properties:
        AssociatePublicIpAddress: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp2
              VolumeSize: '8'
        EbsOptimized: false
        InstanceMonitoring: false
        IamInstanceProfile: !Ref IAMInstanceProfile
        ImageId: ami-28422647
        InstanceType: t2.medium
        SecurityGroups:
          - !Ref RancherSecurityGroup
        UserData:
          'Fn::Base64': !Sub |
              #cloud-config
              ssh_authorized_keys:
                - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDn38sRuC/zPAWU13J1idyOk4VP4P/NK+Xc+dVP8Klb/kbJVXQbyXDOn1oJgFnSxHR+xXNMaENqYCkNZTixQ+WA6LmKxOSnARFXOiP1DcJD8L0plk6QB82eX6CUJifV41kwQbQbRvztglGsM29kLE/EEH+xXpapToa41NhBEuLtKIXmFmBYFLwEPD3/1jtL/6VSeuASz9OsVHSbBCRrnl9+mIWrC+kjRNCKMKK876LXwYofLUiE5fsBiwz8/YpD4Klcu9ouCSzRSk2ilYizS0OyP9MKM8i1oLDJQZY5pMHyIPPpR8pjeLRz6WGBaBvquno7ZPo3ANn+UtMIbR8n94aFqIyeOWkFI/oNJsX4JASIEYP0F9ldb2hvBLPk3arfbLChvBZDXOHjm+SM9eAce0PpU2gWNJjmXvOYk+Y76Iybf86/qj+KG4F+aaZBaOPMUq2MpFXexgD48seoc+5qqY0X+vlnVPzfKZ2+h5KCjhGZTkiyA4l1KMphBrM2ckRF3fb7V4DpdzGzznwbt0CIPiO+M5EwNzC6ny3ShQZ8RVdhlndBpo/W2tKu28cuTrLIibUICq/6K36juPNMRE4xZOAdmwpi9Dvml/OPsOtVmW0hvBAzY1SujT3m91ObWTaRr+lePzVPn/oet9rBfbBU0r0CBNi21IQ1oxFnOp41BJQOrQ== theo.pack@cologne-intelligence.de
                - ${SSHPublicKey}
                  # ADD MORE SSH PUBLIC KEYS HERE
              write_files:
                - path: /etc/rc.local
                  permissions: "0755"
                  owner: root
                  content: |
                    #!/bin/bash
                    wait-for-docker
                    docker run --rm crewjam/awscli:latest cfn-signal -e 0 --stack ${AWS::StackName} --resource RancherOsAutoScalingGroup --region ${AWS::Region}
    RancherOsAutoScalingGroup:
      Type: 'AWS::AutoScaling::AutoScalingGroup'
      Properties:
        HealthCheckType: EC2
        DesiredCapacity: '3'
        LaunchConfigurationName: !Ref RancherOsLaunchConfig
        MaxSize: '5'
        MinSize: '0'
        Tags:
          - Key: Name
            Value: Rancher (AutoScalingGroup)
            PropagateAtLaunch: 'true'
          - Key: Rancher
            Value: ''
            PropagateAtLaunch: 'true'
        VPCZoneIdentifier:
          - !Ref SubnetAPublic
          - !Ref SubnetBPublic
      UpdatePolicy:
        AutoScalingScheduledAction:
          IgnoreUnmodifiedGroupSizeProperties: 'true'
        AutoScalingRollingUpdate:
          MinInstancesInService: '0'
          MaxBatchSize: '1'
          WaitOnResourceSignals: 'true'
          PauseTime: PT5M

  Outputs:
    StackName:
      Description: 'Stack name'
      Value: !Sub '${AWS::StackName}'
    AZs:
      Description: 'AZs'
      Value: 2
      Export:
        Name: !Sub '${AWS::StackName}-AZs'
    AZA:
      Description: 'AZ of A'
      Value: !Select [0, !GetAZs '']
      Export:
        Name: !Sub '${AWS::StackName}-AZA'
    AZB:
      Description: 'AZ of B'
      Value: !Select [1, !GetAZs '']
      Export:
        Name: !Sub '${AWS::StackName}-AZB'
    ClassB:
      Description: 'Class B.'
      Value: !Ref ClassB
      Export:
        Name: !Sub '${AWS::StackName}-ClassB'
    VPC:
      Description: 'VPC.'
      Value: !Ref VPC
      Export:
        Name: !Sub '${AWS::StackName}-VPC'
    SubnetsPublic:
      Description: 'Subnets public.'
      Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
      Export:
        Name: !Sub '${AWS::StackName}-SubnetsPublic'
    RouteTablesPublic:
      Description: 'Route tables public.'
      Value: !Join [',', [!Ref RouteTableAPublic, !Ref RouteTableBPublic]]
      Export:
        Name: !Sub '${AWS::StackName}-RouteTablesPublic'
    SubnetAPublic:
      Description: 'Subnet A public.'
      Value: !Ref SubnetAPublic
      Export:
        Name: !Sub '${AWS::StackName}-SubnetAPublic'
    RouteTableAPublic:
      Description: 'Route table A public.'
      Value: !Ref RouteTableAPublic
      Export:
        Name: !Sub '${AWS::StackName}-RouteTableAPublic'
    SubnetBPublic:
      Description: 'Subnet B public.'
      Value: !Ref SubnetBPublic
      Export:
        Name: !Sub '${AWS::StackName}-SubnetBPublic'
    RouteTableBPublic:
      Description: 'Route table B public.'
      Value: !Ref RouteTableBPublic
      Export:
        Name: !Sub '${AWS::StackName}-RouteTableBPublic'
  